---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: home-assistant
  namespace: home
spec:
  interval: 30m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts/
      chart: app-template
      version: 2.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  dependsOn:
    - name: mosquitto
      namespace: home
  values:

    service:
      main:
        type: LoadBalancer
        externalTrafficPolicy: Local
        loadBalancerIP: "${SVC_HOME_ASSISTANT_ADDR}"
        annotations:
          io.cilium/lb-ipam-ips: "${SVC_HOME_ASSISTANT_ADDR}"
        ports:
          http:
            port: 8123
          debug:
            port: 5678
      codeserver:
        enabled: true
        controller: main
        ports:
          http:
            port: 8080

    ingress:
      main:
        enabled: true
        className: nginx
        annotations:
          external-dns.alpha.kubernetes.io/enabled: "true"
          external-dns.alpha.kubernetes.io/target: ipv4.${SECRET_PUBLIC_DOMAIN}
          hajimari.io/icon: "home-assistant"
          hajimari.io/group: "Home"
          nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For, X-Real-IP, X-Frame-Options, X-Content-Type-Options, X-Forwarded-Proto"
        hosts:
          - host: "hass.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - "hass.${SECRET_DOMAIN}"
            secretName: "homeassistant-tls"

      codeserver:
        enabled: true
        className: "nginx"
        annotations:
          # ForwardAuth start
          nginx.ingress.kubernetes.io/auth-method: GET
          nginx.ingress.kubernetes.io/auth-url: |-
            http://authelia.security.svc.cluster.local:8000/api/verify
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://auth.${SECRET_PUBLIC_DOMAIN}?rm=$request_method
          nginx.ingress.kubernetes.io/auth-response-headers: |-
            Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Method $request_method;
          # ForwardAuth end
          hajimari.io/icon: "mdi:vs-code"
          hajimari.io/group: "Home"
          hajimari.io/appName: "Home Assistant Config"
        hosts:
          - host: "hass-config.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: codeserver
                  port: http
        tls:
          - hosts:
              - "hass-config.${SECRET_DOMAIN}"
            secretName: "homeassistant-config-tls"

    persistence:
      config:
        enabled: true
        existingClaim: home-assistant-config
        globalMounts:
          - path: /config
      secrets:
        enabled: true
        type: secret
        name: home-assistant-secrets-yaml
        advancedMounts:
          main:
            main:
              - subPath: secrets_yaml
                readOnly: true
                path: /config/secrets.yaml
              - subPath: auth_oicd_ini
                readOnly: true
                path: /config/scripts/auth-oidc.ini
      usb:
        enabled: true
        type: hostPath
        hostPath: /dev/serial/by-id/usb-Texas_Instruments_CC2538_USB_CDC-if00
        hostPathType: CharDevice
        advancedMounts:
          main:
            main:
              - path: /dev/serial/by-id/usb-Texas_Instruments_CC2538_USB_CDC-if00

    defaultPodOptions:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: feature.node.kubernetes.io/custom-zigbee
                    operator: In
                    values:
                      - "true"
      hostNetwork: false
      dnsPolicy: ClusterFirstWithHostNet

    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: ghcr.io/home-assistant/home-assistant
              tag: 2024.11.1
            env:
              TZ: "${TIMEZONE}"
              # HTTP_PROXY: "http://gluetun.default:8888"
              # HTTPS_PROXY: "http://gluetun.default:8888"
            envFrom:
              - secretRef:
                  name: home-assistant
            resources:
              requests:
                cpu: 1m
                memory: 100Mi
              limits:
                cpu: 1000m
                memory: 4000Mi
            securityContext:
              privileged: true
          codeserver:
            enabled: true
            image:
              repository: ghcr.io/coder/code-server
              tag: 4.95.1
            git:
              deployKeySecret: code-server
            workingDir: "/config"
            args:
              - --auth
              - "none"
              - --user-data-dir
              - "/config/.vscode"
              - --extensions-dir
              - "/config/.vscode"
        initContainers:
          check-db-ready:
            name: check-db-ready
            image:
              repository: postgres
              tag: 15.8
            command:
              - "sh"
              - "-c"
              - 'until pg_isready -h homelab-pgsql.database.svc.cluster.local -p
                5432; do echo "waiting for database to be ready"; sleep 2; done;'
