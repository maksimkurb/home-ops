---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: ispy
  namespace: home
spec:
  interval: 30m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts/
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  values:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: feature.node.kubernetes.io/custom-nvidia-gpu
                  operator: In
                  values:
                    - "true"
    runtimeClassName: nvidia
    controller:
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      repository: ghcr.io/maksimkurb/ispyagentdvr-docker
      tag: "latest"
    env:
      TZ: "${TIMEZONE}"
    service:
      main:
        type: LoadBalancer
        externalTrafficPolicy: Local
        loadBalancerIP: "${SVC_ISPY_ADDR}"
        ports:
          http:
            port: 8090
          turn:
            port: 3748
            protocol: UDP
          webrtc00:
            port: 50000
            protocol: UDP
          webrtc01:
            port: 50001
            protocol: UDP
          webrtc02:
            port: 50002
            protocol: UDP
          webrtc03:
            port: 50003
            protocol: UDP
          webrtc04:
            port: 50004
            protocol: UDP
          webrtc05:
            port: 50005
            protocol: UDP
          webrtc06:
            port: 50006
            protocol: UDP
          webrtc07:
            port: 50007
            protocol: UDP
          webrtc08:
            port: 50008
            protocol: UDP
          webrtc09:
            port: 50009
            protocol: UDP
          webrtc10:
            port: 50010
            protocol: UDP
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          # ForwardAuth start
          nginx.ingress.kubernetes.io/auth-method: GET
          nginx.ingress.kubernetes.io/auth-url: |-
            http://authelia.security.svc.cluster.local:8000/api/verify
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://auth.${SECRET_PUBLIC_DOMAIN}?rm=$request_method
          nginx.ingress.kubernetes.io/auth-response-headers: |-
            Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Method $request_method;
          # ForwardAuth end
          nginx.ingress.kubernetes.io/configuration-snippet: |
            set $xRequestId "";
            set $xRealIp "";
            set $xForwardedFor "";
            set $xForwardedHost "";
            set $xForwardedPort "";
            set $xForwardedProto "";
            set $xForwardedScheme "";
            set $xOriginalUri "";
            set $xOriginalUri "";
            set $xScheme "";
            set $xOriginalForwardedFor "";

            access_by_lua_block {
              if not ngx.var.request_uri or
                not string.match(ngx.var.request_uri, "cmd.json")
              then
                  return
              end

              ngx.req.read_body()
              local data = ngx.req.get_body_data()
              if data then
                  local new_data = string.gsub(data, "\"Protocol\":\"https:\"", "\"Protocol\":\"http:\"")
                  ngx.req.set_body_data(new_data)
              end
            }
        hosts:
          - host: "ispy.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "ispy.${SECRET_DOMAIN}"
            secretName: "ispy-tls"
    persistence:
      config:
        enabled: true
        type: pvc
        accessMode: ReadWriteOnce
        size: 100Mi
        mountPath: /agent/Media/XML
        storageClass: nfs-proxmox
        retain: true
      commands:
        enabled: true
        type: pvc
        accessMode: ReadWriteOnce
        size: 100Mi
        mountPath: /agent/Commands
        storageClass: nfs-proxmox
        retain: true
      media:
        enabled: true
        existingClaim: ispy-media-nfs
        mountPath: /agent/Media/WebServerRoot/Media
        readOnly: false
    resources:
      requests:
        cpu: 10m
        memory: 100Mi
        nvidia.com/gpu: "1"
      limits:
        cpu: 1000m
        memory: 1500Mi
        nvidia.com/gpu: "1"
