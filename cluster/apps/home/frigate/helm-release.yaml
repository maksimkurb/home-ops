---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: frigate
  namespace: home
spec:
  interval: 30m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s-labs.github.io/helm-charts/
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  values:

    controller:
      annotations:
        reloader.stakater.com/auto: "true"

    service:
      app:
        controller: frigate
        type: LoadBalancer
        externalTrafficPolicy: Local
        loadBalancerIP: "${SVC_FRIGATE_ADDR}"
        annotations:
          io.cilium/lb-ipam-ips: "${SVC_FRIGATE_ADDR}"
        ports:
          http:
            port: 5000
          go2rtc:
            port: 1984
            protocol: TCP
          rtsp:
            port: 8554
            protocol: TCP
          webrtc-tcp:
            port: 8555
            protocol: TCP
          webrtc-udp:
            port: 8555
            protocol: UDP

    ingress:
      main:
        enabled: true
        annotations:
          # ForwardAuth start
          nginx.ingress.kubernetes.io/auth-method: GET
          nginx.ingress.kubernetes.io/auth-url: |-
            http://authelia.security.svc.cluster.local:8000/api/verify
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://auth.${SECRET_PUBLIC_DOMAIN}?rm=$request_method
          nginx.ingress.kubernetes.io/auth-response-headers: |-
            Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Method $request_method;
          # ForwardAuth end
          external-dns.alpha.kubernetes.io/enabled: "true"
          external-dns.alpha.kubernetes.io/target: ${INGRESS_DEFAULT}
          external-dns.alpha.kubernetes.io/cloudflare-proxied: ${INGRESS_DEFAULT_CF_PROXY}
          hajimari.io/icon: "mdi:cctv"
          hajimari.io/group: "Home"
        hosts:
          - host: "frigate.${SECRET_PUBLIC_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: frigate
                  port: 5000
        className: nginx

    persistence:
      data:
        enabled: true
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce
        size: 5Gi
        storageClass: local-path
        retain: true
        globalMounts:
          - path: /config
      # config-file:
      #   enabled: true
      #   type: secret
      #   name: frigate-config
      #   readOnly: true
      #   advancedMounts:
      #     main:
      #       main:
      #         - path: /config/config.yml
      #           subPath: config_yaml
      dshm:
        enabled: true
        type: emptyDir
        medium: Memory
        sizeLimit: 300Mi
        globalMounts:
          - path: /dev/shm
      media:
        enabled: true
        existingClaim: frigate-media
        globalMounts:
          - path: /media/frigate

    defaultPodOptions:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: feature.node.kubernetes.io/custom-nvidia-gpu
                    operator: In
                    values:
                      - "true"
      runtimeClassName: nvidia

    controllers:
      frigate:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/blakeblackshear/frigate
              tag: "0.16.1-tensorrt"
            env:
              TZ: "${TIMEZONE}"
            envFrom:
              - secretRef:
                  name: frigate-secret
            resources:
              requests:
                cpu: 200m
                memory: 100Mi
                nvidia.com/gpu: "1"
              limits:
                cpu: 4000m
                memory: 6000Mi
                nvidia.com/gpu: "1"
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/version
                    port: &port 5000
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup: *probes
