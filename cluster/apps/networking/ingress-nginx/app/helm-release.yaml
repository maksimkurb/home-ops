---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ingress-nginx
  namespace: networking
spec:
  interval: 30m
  chart:
    spec:
      chart: ingress-nginx
      version: 4.13.3
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx-charts
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: cert-manager
      namespace: kube-system
  values:
    controller:
      replicaCount: 2
      updateStrategy:
        rollingUpdate:
          maxUnavailable: 1
          maxSurge: 1
        type: RollingUpdate
      extraEnvs:
        - name: TZ
          value: "${TIMEZONE}"
      service:
        loadBalancerIP: "${SVC_NGINX_ADDR}"
        annotations:
          io.cilium/lb-ipam-ips: "${SVC_NGINX_ADDR}"
        externalTrafficPolicy: Local
      publishService:
        enabled: true
      ingressClassResource:
        default: true
      allowSnippetAnnotations: true

      # CROWDSEC START
      image:
        PullPolicy: IfNotPresent
        image: crowdsecurity/controller
        tag: v1.13.2
        digest: sha256:4575be24781cad35f8e58437db6a3f492df2a3167fed2b6759a6ff0dc3488d56
        registry: docker.io
      extraVolumes:
        - name: crowdsec-bouncer-plugin
          emptyDir: {}
      extraInitContainers:
        - name: init-clone-crowdsec-bouncer
          image: crowdsecurity/lua-bouncer-plugin
          imagePullPolicy: IfNotPresent
          env:
            - name: API_URL
              value: "http://crowdsec-service.security.svc.cluster.local:8080" # crowdsec lapi service-name
            - name: API_KEY
              value: "${SECRET_CROWDSEC_NGINX_BOUNCER_API_KEY}" # generated with `cscli bouncers add <bouncer_name>`
            - name: BOUNCER_CONFIG
              value: "/crowdsec/crowdsec-bouncer.conf"
            - name: CAPTCHA_PROVIDER
              value: "hcaptcha" # valid providers are recaptcha, hcaptcha, turnstile
            - name: SECRET_KEY
              value: "${SECRET_HCAPTCHA_SECRET}" # If you want captcha support otherwise remove this ENV VAR
            - name: SITE_KEY
              value: "${HCAPTCHA_SITE}" # If you want captcha support otherwise remove this ENV VAR
            - name: BAN_TEMPLATE_PATH
              value: "/etc/nginx/lua/plugins/crowdsec/templates/ban.html"
            - name: CAPTCHA_TEMPLATE_PATH
              value: "/etc/nginx/lua/plugins/crowdsec/templates/captcha.html"
          command:
            [
              "sh",
              "-c",
              "sh /docker_start.sh; mkdir -p /lua_plugins/crowdsec/; cp -R /crowdsec/* /lua_plugins/crowdsec/",
            ]
          volumeMounts:
            - name: crowdsec-bouncer-plugin
              mountPath: /lua_plugins
      extraVolumeMounts:
        - name: crowdsec-bouncer-plugin
          mountPath: /etc/nginx/lua/plugins/crowdsec
          subPath: crowdsec
      # CROWDSEC END


      config:
        # CROWDSEC START
        plugins: "crowdsec"
        lua-shared-dicts: "crowdsec_cache: 50m"
        server-snippet: |
          lua_ssl_trusted_certificate "/etc/ssl/certs/ca-certificates.crt";
          resolver local=on ipv6=off;
        # CROWDSEC END
        annotations-risk-level: Critical
        client-body-buffer-size: "100M"
        client-body-timeout: 120
        client-header-timeout: 120
        custom-http-errors: |-
          403,404,502,503,504
        enable-brotli: "true"
        enable-ocsp: "true"
        enable-real-ip: "true"
        force-ssl-redirect: "true"
        hide-headers: Server,X-Powered-By
        forwarded-for-header: "X-Forwarded-For"
        hsts-max-age: "31449600"
        keep-alive: 120
        keep-alive-requests: 10000
        proxy-body-size: 0
        proxy-buffer-size: 16k
        ssl-protocols: "TLSv1.3 TLSv1.2"
        use-forwarded-headers: "true"
        compute-full-forwarded-for: "true"
        # log-format-upstream: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id'
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: networking
          namespaceSelector:
            any: true
      extraArgs:
        default-ssl-certificate: "networking/${SECRET_DOMAIN/./-}-tls"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/component: controller
      podAnnotations:
        configmap.reloader.stakater.com/reload: "cloudflare-proxied-networks,ai-robots-useragents"
      resources:
        requests:
          cpu: 1m
          memory: 250Mi
        limits:
          memory: 2000Mi
    defaultBackend:
      enabled: false
      # image:
      #   repository: ghcr.io/tarampampam/error-pages
      #   tag: 3.7.0
      # replicaCount: 2
      # extraEnvs:
      #   - name: TEMPLATE_NAME
      #     value: hacker-terminal
      #   - name: SHOW_DETAILS
      #     value: "false"
      # affinity:
      #   podAntiAffinity:
      #     preferredDuringSchedulingIgnoredDuringExecution:
      #       - weight: 100
      #         podAffinityTerm:
      #           labelSelector:
      #             matchExpressions:
      #               - key: app.kubernetes.io/name
      #                 operator: In
      #                 values:
      #                   - ingress-nginx
      #               - key: app.kubernetes.io/component
      #                 operator: In
      #                 values:
      #                   - default-backend
      #           topologyKey: kubernetes.io/hostname
  valuesFrom:
    # Cloudflare Networks
    # https://www.cloudflare.com/ips/
    - targetPath: controller.config.proxy-real-ip-cidr
      kind: ConfigMap
      name: cloudflare-proxied-networks
      valuesKey: cloudflare-proxied-networks.txt
    # https://github.com/ai-robots-txt/ai.robots.txt
    - targetPath: controller.config.block-user-agents
      kind: ConfigMap
      name: ai-robots-useragents
      valuesKey: ai-robots-useragents.txt
