---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: crowdsec
  namespace: security-system
spec:
  interval: 30m
  chart:
    spec:
      chart: crowdsec
      version: 0.20.1
      sourceRef:
        kind: HelmRepository
        name: crowdsec-charts
        namespace: flux-system
      interval: 30m
  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: false
  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace
  rollback:
    recreate: true
    force: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  driftDetection:
    mode: enabled
  maxHistory: 3
  values:
    container_runtime: containerd
    secrets:
      externalSecret:
        name: crowdsec-lapi-keys
        csLapiSecretKey: csLapiSecret
        registrationTokenKey: registrationToken
    config:
      config.yaml.local: |
        api:
          server:
            auto_registration: # Activate if not using TLS for authentication
              enabled: true
              token: "$${REGISTRATION_TOKEN}" # /!\ Do not modify this variable (auto-generated and handled by the chart)
              allowed_ranges: # /!\ Make sure to adapt to the pod IP ranges used by your cluster
                - "127.0.0.1/32"
                - "192.168.0.0/16"
                - "10.0.0.0/8"
                - "172.16.0.0/12"
        db_config:
          type: postgresql
          user: crowdsec
          db_name: crowdsec
          password: ${SECRET_CROWDSEC_POSTGRES_PASSWORD}
          host: homelab-pgsql.database.svc.cluster.local
          port: 5432
      profiles.yaml: |
        name: default_ip_remediation
        #debug: true
        filters:
        - Alert.GetScope() == "Ip"
        decisions:
        - type: ban
          duration: 4h
        #duration_expr: Sprintf('%dh', (GetDecisionsCount(Alert.GetValue()) + 1) * 4)
        notifications:
        - slack_default  # Set the webhook in /etc/crowdsec/notifications/slack.yaml before enabling this.
        #   - splunk_default # Set the splunk url and token in /etc/crowdsec/notifications/splunk.yaml before enabling this.
        #   - http_default   # Set the required http parameters in /etc/crowdsec/notifications/http.yaml before enabling this.
        #   - email_default  # Set the required email parameters in /etc/crowdsec/notifications/email.yaml before enabling this.
      scenarios:
        wp-admin-ban.yaml: |
          type: trigger
          name: crowdsecurity/wp-admin-ban
          description: "Ban IPs accessing wp-admin paths"
          filter: evt.Meta.log_type in ["http_access-log", "http_error-log"] and
            (evt.Meta.http_path startsWith "/wp-admin" or
             evt.Meta.http_path == "/wp-login.php" or
             evt.Meta.http_path startsWith "/wp-login" or
             evt.Meta.http_path contains "/wp-content/plugins/" or
             evt.Meta.http_path == "/xmlrpc.php")
          blackhole: 1h
          groupby: "evt.Meta.source_ip"
          labels:
            confidence: 8
            spoofable: 1
            behavior: "http:wordpress-scan"
            label: "WordPress Admin Access Attempt"
            service: http
            remediation: true
      notifications:
        slack.yaml: |
          # Don't change this
          type: slack

          name: slack_default # this must match with the registered plugin in the profile
          log_level: info # Options include: trace, debug, info, warn, error, off

          format: |  # This template receives list of models.Alert objects. The message would be composed from this
            {{range . -}}
            {{$alert := . -}}
            {{range .Decisions -}}
            {{if $alert.Source.Cn -}}
            :flag_{{$alert.Source.Cn | lower}}: [{{.Value}}](https://www.whois.com/whois/{{.Value}}) will get {{.Type}} for next {{.Duration}} for triggering {{.Scenario}} on machine '{{$alert.MachineID}}'. [Shodan](https://www.shodan.io/host/{{.Value}}){{end}}
            {{if not $alert.Source.Cn -}}
            :pirate_flag: [{{.Value}}](https://www.whois.com/whois/{{.Value}}) will get {{.Type}} for next {{.Duration}} for triggering {{.Scenario}} on machine '{{$alert.MachineID}}'. [Shodan](https://www.shodan.io/host/{{.Value}}){{end}}
            {{end -}}
            {{end -}}

          webhook: ${SECRET_CROWDSEC_WEBHOOK_URL}


    lapi:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      env:
        - name: ENROLL_KEY
          valueFrom:
            secretKeyRef:
              name: crowdsec-lapi-keys
              key: enrollKey
        - name: ENROLL_INSTANCE_NAME
          value: "k3s-server"
        - name: ENROLL_TAGS
          value: "k8s k3s linux homelab"
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      persistentVolume:
        data:
          enabled: false
          accessModes:
            - ReadWriteOnce
          storageClassName: "local-path"
          size: 1Gi
        config:
          enabled: true
          accessModes:
            - ReadWriteOnce
          storageClassName: "local-path"
          size: 100Mi
    agent:
      acquisition:
        - namespace: networking
          podName: ingress-nginx-controller-*
          program: nginx
      env:
        - name: COLLECTIONS
          value: "crowdsecurity/nginx crowdsecurity/base-http-scenarios"
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
    appsec:
      enabled: false
      # acquisitions:
      #   - source: appsec
      #     listen_addr: "0.0.0.0:7422"
      #     path: /
      #     appsec_config: crowdsecurity/crs-vpatch
      #     labels:
      #       type: appsec
      # configs:
      #   mycustom-appsec-config.yaml: |
      #     name: crowdsecurity/crs-vpatch
      #     default_remediation: ban
      #     inband_rules:
      #       - crowdsecurity/base-config
      #       - crowdsecurity/vpatch-*
      # env:
      #   - name: COLLECTIONS
      #     value: "crowdsecurity/appsec-wordpress crowdsecurity/appsec-crs"
