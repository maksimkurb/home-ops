---
- name: Configure AmneziaWG for {{ interface.name }}
  template:
    src: awg.conf.j2
    dest: "/etc/amnezia/amneziawg/{{ interface.name }}.conf"
    owner: root
    group: root
    mode: '0600'
  become: true
  register: config_changed

- name: Enable AmneziaWG service for {{ interface.name }}
  systemd:
    name: "awg-quick@{{ interface.name }}"
    enabled: yes
  become: true

- name: Restart AmneziaWG service for {{ interface.name }}
  systemd:
    name: "awg-quick@{{ interface.name }}"
    state: restarted
  become: true
  when: config_changed.changed

- name: Start AmneziaWG service for {{ interface.name }} if not running
  systemd:
    name: "awg-quick@{{ interface.name }}"
    state: started
  become: true
  when: not config_changed.changed

- name: Wait for AmneziaWG service to be active for {{ interface.name }}
  systemd:
    name: "awg-quick@{{ interface.name }}"
    state: started
  register: service_status
  until: service_status.status.ActiveState == 'active'
  retries: 5
  delay: 5
  become: true

- name: Get absolute path to this Git repository
  delegate_to: localhost
  become: false
  run_once: true
  ansible.builtin.command: "git rev-parse --show-toplevel"
  register: repo_abs_path

- name: Create directory for peer configs
  delegate_to: localhost
  become: false
  ansible.builtin.file:
    path: "{{ repo_abs_path.stdout }}/provision/vpn-server-awg-configs/{{ inventory_hostname }}"
    state: directory
    mode: '0700'

- name: Write AmneziaWG wireguard config for each peer to a file
  delegate_to: localhost
  become: false
  copy:
    dest: "{{ repo_abs_path.stdout }}/provision/vpn-server-awg-configs/{{ inventory_hostname }}/{{ peer.name }}.conf"
    content: |
      # For importing into Keenetic router, run this command after import:
      # interface WireguardX wireguard asc {{ interface.jc }} {{ interface.jmin }} {{ interface.jmax }} {{ interface.s1 }} {{ interface.s2 }} {{ interface.h1 }} {{ interface.h2 }} {{ interface.h3 }} {{ interface.h4 }}

      [Interface]
      Address = {{ peer.allowed_ips | split(',') | first | trim }}
      PrivateKey = {{ peer.private_key }}
      DNS = 8.8.8.8
      MTU = {{ interface.mtu }}
      Jc = {{ interface.jc }}
      Jmin = {{ interface.jmin }}
      Jmax = {{ interface.jmax }}
      S1 = {{ interface.s1 }}
      S2 = {{ interface.s2 }}
      H1 = {{ interface.h1 }}
      H2 = {{ interface.h2 }}
      H3 = {{ interface.h3 }}
      H4 = {{ interface.h4 }}

      [Peer]
      PublicKey = {{ interface.public_key }}
      AllowedIPs = 0.0.0.0/1, 128.0.0.0/1, ::/1, 8000::/1
      Endpoint = {{ interface.public_host }}:{{ interface.port }}
      PersistentKeepalive = 60

  loop: "{{ interface.peers }}"
  loop_control:
    loop_var: peer
    label: "{{ peer.name }}"
  when: interface.peers is defined
